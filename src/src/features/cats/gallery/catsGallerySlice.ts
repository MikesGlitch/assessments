import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../../app/store'
import { getCats as getCatsApi } from './catsGalleryAPI'

export interface ICat {  
  id: string;
  url: string;
  width: number;
  height: number;
  sub_id?: string;
  created_at: Date;
  original_filename: string;
}

export interface CatsState {
  status: 'idle' | 'loading' | 'failed' | 'complete',
  cats: ICat[],
  hasMoreData: boolean,
  currentPage: number
}

const initialState: CatsState = {
  status: 'idle',
  cats: [],
  hasMoreData: true,
  currentPage: 0
}

interface ICatsAction {
  page: number
}

export const getCatsAsync = createAsyncThunk(
  'cats/get',
  async (action: ICatsAction) => {
    const response = await getCatsApi(action.page)
    return response
  }
)

export const catsSlice = createSlice({
  name: 'cats',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // .addCase(uploadCatAsync.fulfilled, (state) => {
      //   state = { ...initialState }
      // })
      .addCase(getCatsAsync.pending, (state, action) => {
        if (action.meta.arg.page === 0) {
          state.cats = initialState.cats
          state.currentPage = initialState.currentPage
          state.hasMoreData = initialState.hasMoreData
        }

        state.status = 'loading'
      })
      .addCase(getCatsAsync.fulfilled, (state, action) => {
        state.status = 'complete'
        if(action.payload.cats)

        state.cats = [...state.cats, ...action.payload.cats]
        console.log(action.payload.paginationCount, state.cats.length)
        state.hasMoreData = state.cats.length < action.payload.paginationCount

        if (state.hasMoreData) {
          state.currentPage = state.currentPage + 1
        }
      })
  },
})

export const { } = catsSlice.actions

// selectors
export const selectCats = (state: AppState) => state.catsGallery.cats
export const selectHasMoreData = (state: AppState) => state.catsGallery.hasMoreData
export const selectCurrentPage = (state: AppState) => state.catsGallery.currentPage

export default catsSlice.reducer
